// Generated by CoffeeScript 1.8.0
(function() {
  var FractalBanner;

  FractalBanner = (function() {
    function FractalBanner() {
      var _ref;
      this.banner = document.getElementById("banner");
      this.header = document.getElementById("header");
      this.initRenderer();
      if (this.gl == null) {
        return;
      }
      this.initShaders();
      this.initPalette();
      this.initQuad();
      this.resize();
      this.animating = (_ref = document.body.classList) != null ? _ref.contains("front") : void 0;
      this.random = Math.random();
      this.timeOffset = 0;
      window.addEventListener("resize", (function(_this) {
        return function(e) {
          return _this.resize(e);
        };
      })(this));
      window.addEventListener("orientationchange", (function(_this) {
        return function(e) {
          return _this.resize(e);
        };
      })(this));
      document.addEventListener("mousemove", (function(_this) {
        return function(e) {
          return _this.mousemove(e);
        };
      })(this));
      header.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.toggleAnimation(e);
        };
      })(this));
    }

    FractalBanner.prototype.initRenderer = function() {
      var _ref;
      this.canvas = document.createElement("canvas");
      this.banner.appendChild(this.canvas);
      return this.gl = (_ref = this.canvas.getContext("webgl")) != null ? _ref : this.canvas.getContext("experimental-webgl");
    };

    FractalBanner.prototype.initShaders = function() {
      var fragmentShader, vertexShader;
      vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);
      this.gl.shaderSource(vertexShader, "attribute vec2 position;\nvoid main(){gl_Position=vec4(position,0,1);}");
      this.gl.compileShader(vertexShader);
      fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);
      this.gl.shaderSource(fragmentShader, "precision lowp float;\nuniform float time;uniform vec2 resolution;uniform vec2 mouse;uniform sampler2D palette;vec3 a(vec3 b){vec4 c=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 d=abs(fract(b.xxx+c.xyz)*6.0-c.www);return b.z*mix(c.xxx,clamp(d-c.xxx,0.0,1.0),b.y);}\n#define N 42\nvoid main(void){vec2 e=((gl_FragCoord.xy-resolution*0.5)/min(resolution.x,resolution.y))*20.0;float f=0.0;float g=3.1415926535*2.0;float h=(7.296-0.01*mouse.x*0.2+0.0001*time)*g;float i=cos(h);float j=sin(h);vec2 k=vec2(i,-j);vec2 l=vec2(j,i);\nvec2 m=vec2(0,1.618);float n=-2.916+0.01*mouse.y+0.0001*time;for(int o=0;o<N;o++){float p=dot(e,e);if(p>1.0){p=(1.0)/p;e.x=e.x*p;e.y=e.y*p;}f*=.99;f+=p;e=vec2(dot(e,k),dot(e,l))*n+m;}float q=fract(f);gl_FragColor=texture2D(palette, vec2(fract(0.1 * time + q), 0.5));}");
      this.gl.compileShader(fragmentShader);
      this.shader = this.gl.createProgram();
      this.gl.attachShader(this.shader, vertexShader);
      this.gl.attachShader(this.shader, fragmentShader);
      this.gl.linkProgram(this.shader);
      this.gl.useProgram(this.shader);
      this.positionAttrib = this.gl.getAttribLocation(this.shader, "position");
      this.gl.enableVertexAttribArray(this.positionAttrib);
      this.timeUniform = this.gl.getUniformLocation(this.shader, "time");
      this.gl.uniform1f(this.timeUniform, 0);
      this.resolutionUniform = this.gl.getUniformLocation(this.shader, "resolution");
      this.gl.uniform2f(this.resolutionUniform, this.width, this.height);
      this.mouseUniform = this.gl.getUniformLocation(this.shader, "mouse");
      return this.gl.uniform2f(this.mouseUniform, 0.5, 0.5);
    };

    FractalBanner.prototype.initPalette = function() {
      var colors, lerp, palette;
      palette = new Uint8Array(512 * 4);
      lerp = function(startIndex, stopIndex, startColor, stopColor) {
        var i, ratio, _i, _results;
        _results = [];
        for (i = _i = startIndex; startIndex <= stopIndex ? _i < stopIndex : _i > stopIndex; i = startIndex <= stopIndex ? ++_i : --_i) {
          ratio = 1 - (i - startIndex) / (stopIndex - startIndex);
          palette[i * 4 + 0] = Math.floor(ratio * startColor[0] + (1 - ratio) * stopColor[0]);
          palette[i * 4 + 1] = Math.floor(ratio * startColor[1] + (1 - ratio) * stopColor[1]);
          palette[i * 4 + 2] = Math.floor(ratio * startColor[2] + (1 - ratio) * stopColor[2]);
          _results.push(palette[i * 4 + 3] = 255);
        }
        return _results;
      };
      colors = [[[43, 4, 74], [11, 46, 89], [13, 103, 89], [122, 179, 23], [160, 197, 95]], [[7, 9, 61], [12, 15, 102], [11, 16, 140], [14, 78, 173], [16, 127, 201]], [[51, 19, 39], [153, 23, 102], [217, 15, 90], [243, 71, 57], [255, 110, 39]], [[101, 19, 102], [167, 26, 91], [231, 32, 78], [247, 110, 42], [240, 197, 5]], [[166, 2, 108], [209, 2, 78], [252, 57, 3], [252, 127, 3], [255, 171, 3]], [[4, 57, 78], [0, 135, 94], [167, 204, 21], [245, 204, 23], [245, 98, 23]]];
      colors = colors[Math.floor(Math.random() * colors.length)];
      lerp(0, 128, colors[0], colors[1]);
      lerp(128, 192, colors[1], colors[2]);
      lerp(192, 224, colors[2], colors[3]);
      lerp(224, 256, colors[3], colors[4]);
      lerp(256, 320, colors[4], colors[3]);
      lerp(320, 384, colors[3], colors[2]);
      lerp(384, 448, colors[2], colors[1]);
      lerp(448, 512, colors[1], colors[0]);
      this.paletteUniform = this.gl.getUniformLocation(this.shader, "palette");
      this.gl.uniform1i(this.paletteUniform, 0);
      this.gl.activeTexture(this.gl.TEXTURE0);
      this.paletteTexture = this.gl.createTexture();
      this.gl.bindTexture(this.gl.TEXTURE_2D, this.paletteTexture);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
      return this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 512, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, palette);
    };

    FractalBanner.prototype.initQuad = function() {
      var vertexPosBuffer, vertices;
      vertexPosBuffer = this.gl.createBuffer();
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertexPosBuffer);
      vertices = [-1, -1, 1, -1, -1, 1, 1, 1];
      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices), this.gl.STATIC_DRAW);
      return this.gl.vertexAttribPointer(this.vertexPosAttrib, 2, this.gl.FLOAT, false, 0, 0);
    };

    FractalBanner.prototype.resize = function(e) {
      var _ref;
      this.devicePixelRatio = (_ref = window.devicePixelRatio) != null ? _ref : 1;
      this.width = this.banner.offsetWidth * this.devicePixelRatio;
      this.height = this.banner.offsetHeight * this.devicePixelRatio;
      this.canvas.style.width = this.banner.offsetWidth + "px";
      this.canvas.style.height = this.banner.offsetHeight + "px";
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      this.gl.uniform2f(this.resolutionUniform, this.width, this.height);
      return this.gl.viewport(0, 0, this.width, this.height);
    };

    FractalBanner.prototype.mousemove = function(e) {
      var canvasX, canvasY;
      canvasX = (e.pageX - this.canvas.offsetLeft) * this.devicePixelRatio;
      canvasY = (e.pageY - this.canvas.offsetTop) * this.devicePixelRatio;
      return this.gl.uniform2f(this.mouseUniform, canvasX / this.width, 1 - canvasY / this.height);
    };

    FractalBanner.prototype.toggleAnimation = function() {
      this.animating = !this.animating;
      if (this.animating) {
        if (this.lastAnimated == null) {
          this.lastAnimated = 0;
        }
        this.timeOffset += this.lastAnimated - this.timestamp;
        return this.render();
      } else {
        return this.lastAnimated = this.timestamp;
      }
    };

    FractalBanner.prototype.render = function(timestamp) {
      if (timestamp == null) {
        timestamp = 0;
      }
      this.timestamp = timestamp / 1000;
      if (this.animating || this.timestamp === 0) {
        this.gl.uniform1f(this.timeUniform, this.timestamp + this.timeOffset + (250 * (1.0 - 2.0 * this.random)));
        this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);
      }
      return requestAnimationFrame((function(_this) {
        return function(timestamp) {
          return _this.render(timestamp);
        };
      })(this));
    };

    return FractalBanner;

  })();

  document.addEventListener("DOMContentLoaded", function() {
    window.fractalBanner = new FractalBanner();
    return fractalBanner.render();
  });

}).call(this);
