// Generated by CoffeeScript 1.6.3
(function() {
  var Banner;

  Banner = (function() {
    function Banner() {
      var plane, quad,
        _this = this;
      this.$banner = $("#banner");
      this.width = this.$banner.width();
      this.height = this.$banner.height();
      this.scene = new THREE.Scene();
      this.camera = new THREE.OrthographicCamera(-this.width / 2, this.width / 2, this.height / 2, -this.height / 2, -1000, 1000);
      this.camera.position.z = 100;
      this.camera.lookAt(this.scene.position);
      this.material = new THREE.ShaderMaterial({
        uniforms: {
          time: {
            type: "f",
            value: 0.0
          },
          resolution: {
            type: "v2",
            value: new THREE.Vector2(this.width, this.height)
          },
          mouse: {
            type: "v2",
            value: new THREE.Vector2(0.5, 0.5)
          }
        },
        vertexShader: "void main(){gl_Position=vec4(position,1.0);}",
        fragmentShader: "#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform float time;uniform vec2 resolution;uniform vec2 mouse;vec3 a(vec3 b){vec4 c=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 d=abs(fract(b.xxx+c.xyz)*6.0-c.www);return b.z*mix(c.xxx,clamp(d-c.xxx,0.0,1.0),b.y);}\n#define N 52\nvoid main(void){vec2 e=(gl_FragCoord.xy-resolution/2.0)/min(resolution.y,resolution.x)*20.0;float f=0.0;float g=3.1415926535*2.0;float h=(0.595-0.001*mouse.x*0.2+0.00003*time)*g;float i=cos(h);float j=sin(h);vec2 k=vec2(i,-j);vec2 l=vec2(j,i);\nvec2 m=vec2(0,1.0+0.618);float n=1.16+0.001*mouse.y+0.00003*time;for(int o=0;o<N;o++){float p=dot(e,e);if(p>1.0){p=(1.0)/p;e.x=e.x*p;e.y=e.y*p;}f*=.99;f+=p;e=vec2(dot(e,k),dot(e,l))*n+m;}float q=fract(f);q=2.0*min(q,1.0-q);float r=mod(0.441+time/30.0,1.0);gl_FragColor=vec4(a(vec3(mod(r+0.5*sin(q+0.1*time),1.0),min(q,1.0),q)),1.0);}"
      });
      this.uniforms = this.material.uniforms;
      plane = new THREE.PlaneGeometry(this.width, this.height);
      quad = new THREE.Mesh(plane, this.material);
      quad.position.z = -100;
      this.scene.add(quad);
      this.renderer = new THREE.WebGLRenderer();
      this.$banner.append(this.renderer.domElement);
      this.animating = $('body').is('.front');
      this.random = Math.random();
      this.timeOffset = 0;
      $(window).resize(function(e) {
        return _this.resize(e);
      });
      $(window).mousemove(function(e) {
        return _this.mousemove(e);
      });
      $('header').click(function(e) {
        return _this.toggleAnimation();
      });
    }

    Banner.prototype.resize = function(e) {
      this.width = this.$banner.width();
      this.height = this.$banner.height();
      this.uniforms.resolution.value = new THREE.Vector2(this.width, this.height);
      this.camera.aspect = this.width / this.height;
      this.camera.updateProjectionMatrix();
      return this.renderer.setSize(this.width, this.height);
    };

    Banner.prototype.mousemove = function(e) {
      return this.uniforms.mouse.value = new THREE.Vector2(e.clientX / this.width, 1 - e.clientY / this.height);
    };

    Banner.prototype.toggleAnimation = function() {
      this.animating = !this.animating;
      if (this.animating) {
        if (this.lastAnimated == null) {
          this.lastAnimated = 0;
        }
        this.timeOffset += this.lastAnimated - this.timestamp;
        return this.render();
      } else {
        return this.lastAnimated = this.timestamp;
      }
    };

    Banner.prototype.render = function(timestamp) {
      var _this = this;
      if (timestamp == null) {
        timestamp = 0;
      }
      this.timestamp = timestamp / 1000;
      if (this.animating || this.timestamp === 0) {
        this.uniforms.time.value = this.timestamp + this.timeOffset + this.random * 1000;
        this.renderer.clear();
        this.renderer.render(this.scene, this.camera);
      }
      return requestAnimationFrame(function(timestamp) {
        return _this.render(timestamp);
      });
    };

    return Banner;

  })();

  $(function() {
    window.banner = new Banner();
    banner.resize();
    return banner.render();
  });

}).call(this);
