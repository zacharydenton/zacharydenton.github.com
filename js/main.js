// Generated by CoffeeScript 1.4.0
(function() {
  var GitHub, GooglePlus, Lastfm, Twitter, prettyDate, resizeImage;

  Twitter = (function() {

    function Twitter(selector, username, count) {
      var _this = this;
      this.selector = selector;
      this.username = username;
      this.count = count;
      this.target = $(selector);
      if (this.target != null) {
        $.ajax({
          url: "http://api.twitter.com/1/statuses/user_timeline/" + this.username + ".json?trim_user=true&count=" + (this.count + 10) + "&include_entities=1&exclude_replies=true&callback=?",
          dataType: "jsonp",
          error: function(err) {
            return this.target.addClass("error").text("Twitter's busted");
          },
          success: function(data) {
            return _this.render(data.slice(0, _this.count));
          }
        });
      }
    }

    Twitter.prototype.linkifyTweet = function(text, url) {
      var shortUrl, u, _i, _len;
      text = text.replace(/(https?:\/\/)([\w\-:;?&=+.%#\/]+)/gi, '<a href="$1$2">$2</a>').replace(/(^|\W)@(\w+)/g, '$1<a href="http://twitter.com/$2">@$2</a>').replace(/(^|\W)#(\w+)/g, '$1<a href="http://search.twitter.com/search?q=%23$2">#$2</a>');
      for (_i = 0, _len = url.length; _i < _len; _i++) {
        u = url[_i];
        if (u.expanded_url != null) {
          shortUrl = new RegExp(u.url, 'g');
          text = text.replace(shortUrl, u.expanded_url);
          shortUrl = new RegExp(">" + (u.url.replace(/https?:\/\//, '')), 'g');
          text = text.replace(shortUrl, ">" + u.display_url);
        }
      }
      return text;
    };

    Twitter.prototype.renderTweet = function(tweet) {
      return "<div class='tweet'><p>" + (this.linkifyTweet(tweet.text.replace(/\n/g, '<br>'), tweet.entities.urls)) + "</p><a href='http://twitter.com/" + this.username + "/status/" + tweet.id_str + "'><time datetime='" + tweet.created_at + "'>" + (prettyDate(tweet.created_at)) + "</time></a></div><hr class='short'>";
    };

    Twitter.prototype.render = function(tweets) {
      var tweet;
      return this.target.html(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tweets.length; _i < _len; _i++) {
          tweet = tweets[_i];
          _results.push(this.renderTweet(tweet));
        }
        return _results;
      }).call(this)).join(''));
    };

    return Twitter;

  })();

  GitHub = (function() {

    function GitHub(selector, username, count) {
      var _this = this;
      this.selector = selector;
      this.username = username;
      this.count = count;
      this.target = $(selector);
      if (this.target != null) {
        $.ajax({
          url: "https://api.github.com/users/" + this.username + "/events/public",
          dataType: 'jsonp',
          error: function(err) {
            return this.target.addClass("error").text("GitHub's busted");
          },
          success: function(data) {
            return _this.render(data.data.slice(0, _this.count));
          }
        });
      }
    }

    GitHub.prototype.repoUrl = function(event) {
      return "<a href='https://github.com/" + event.repo.name + "'>" + (event.repo.name.replace("" + this.username + "/", "")) + "</a>";
    };

    GitHub.prototype.issueUrl = function(event) {
      return "<a href='" + event.payload.issue.html_url + "'>issue #" + event.payload.issue.number + "</a> (" + event.payload.issue.title + ")";
    };

    GitHub.prototype.commitUrl = function(event) {
      var commit;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = event.payload.commits;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          commit = _ref[_i];
          _results.push("<a href='https://github.com/" + event.repo.name + "/commit/" + commit.sha + "'>" + commit.message + "</a>");
        }
        return _results;
      })()).join(", ");
    };

    GitHub.prototype.renderEvent = function(event) {
      var content;
      content = "";
      switch (event.type) {
        case "WatchEvent":
          content = "Starred " + (this.repoUrl(event)) + ".";
          break;
        case "IssuesEvent":
          if (event.payload.action === "closed") {
            content = "Closed " + (this.issueUrl(event)) + " on " + (this.repoUrl(event)) + ".";
          }
          break;
        case "PushEvent":
          content = "Updated " + (this.repoUrl(event)) + ": " + (this.commitUrl(event));
          break;
        case "FollowEvent":
          content = "Followed <a href='" + event.payload.target.html_url + "'>" + event.payload.target.login + "</a>.";
          break;
        case "CreateEvent":
          if (event.payload.description) {
            content = "Created " + (this.repoUrl(event)) + " &mdash; " + event.payload.description + ".";
          } else {
            content = "Created " + (this.repoUrl(event)) + ".";
          }
      }
      if (content) {
        return "<div class='tweet'><p>" + content + "</p><time datetime='" + event.created_at + "'>" + (prettyDate(event.created_at)) + "</time></div><hr class='short'>";
      } else {
        return "";
      }
    };

    GitHub.prototype.render = function(events) {
      var event;
      return this.target.html(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          event = events[_i];
          _results.push(this.renderEvent(event));
        }
        return _results;
      }).call(this)).join(''));
    };

    return GitHub;

  })();

  GooglePlus = (function() {

    function GooglePlus(selector, userId, count) {
      var _this = this;
      this.selector = selector;
      this.userId = userId;
      this.count = count;
      this.target = $(selector);
      if (this.target != null) {
        $.ajax({
          url: "https://www.googleapis.com/plus/v1/people/" + this.userId + "/activities/public?key=AIzaSyDd0bEHYWJbctBAd814stqn2_1xlaWnu5w",
          dataType: 'jsonp',
          error: function(err) {
            return this.target.addClass("error").text("Google+ is busted");
          },
          success: function(data) {
            return _this.render(data.items.slice(0, _this.count));
          }
        });
      }
    }

    GooglePlus.prototype.renderAttachment = function(attachment) {
      var content, videoId;
      content = "";
      switch (attachment.objectType) {
        case "article":
          if (attachment.image) {
            if (attachment.content) {
              content += "<div class='block-image block-image-left'><a href='" + attachment.url + "'><img src='" + attachment.image.url + "' /></a></div>";
              return content += "<p><a href='" + attachment.url + "'>" + attachment.displayName + "</a></p>";
            } else {
              return content += "<a href='" + attachment.fullImage.url + "'><img src='" + attachment.fullImage.url + "' /></a>";
            }
          } else {
            return content += "<p><a href='" + attachment.url + "'>" + attachment.displayName + "</a></p>";
          }
          break;
        case "video":
          videoId = attachment.url.split('=')[1];
          return content = "<div class='video'><iframe src='http://www.youtube.com/embed/" + videoId + "?autohide=1' frameborder='0' width='560' height='315'></iframe></div>";
        case "photo":
          return content = "<a href='" + attachment.fullImage.url + "'><img src='" + attachment.image.url + "' /></a>";
      }
    };

    GooglePlus.prototype.renderActivity = function(activity) {
      var attachment, attachments, content, type, videoId;
      content = "";
      attachments = activity.object.attachments;
      if (attachments != null) {
        type = attachments[0].objectType;
        switch (type) {
          case "article":
            if (activity.object.content != null) {
              attachment = attachments[0];
              if (attachment.fullImage) {
                if (attachment.content) {
                  content += "<div class='block-image block-image-left'><a href='" + attachment.url + "'><img src='" + (resizeImage({
                    url: attachment.fullImage.url,
                    resize_w: 192
                  })) + "' /></a></div>";
                  content += "<p><a href='" + attachment.url + "'>" + attachment.displayName + "</a></p>";
                } else {
                  content += "<a href='" + attachment.fullImage.url + "'><img src='" + (resizeImage({
                    url: attachment.fullImage.url,
                    resize_w: 384
                  })) + "' /></a>";
                }
              } else {
                content += "<p><a href='" + attachment.url + "'>" + attachment.displayName + "</a></p>";
              }
              content += "<p>" + activity.object.content + "</p>";
            }
            break;
          case "video":
            if (activity.object.content != null) {
              attachment = attachments[0];
              videoId = attachment.url.split('=')[1];
              content += "<div class='video'><iframe src='http://www.youtube.com/embed/" + videoId + "?autohide=1' frameborder='0' width='560' height='315'></iframe></div>";
              content += "<p>" + activity.object.content + "</p>";
            }
            break;
          case "photo":
            content += ((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = attachments.length; _i < _len; _i++) {
                attachment = attachments[_i];
                _results.push("<a href='" + attachment.fullImage.url + "'><img src='" + (resizeImage({
                  url: attachment.fullImage.url,
                  resize_w: 384
                })) + "' /></a>");
              }
              return _results;
            })()).join('');
            if (activity.object.content) {
              content += "<p>" + activity.object.content + "</p>";
            }
        }
        content += "<hr>";
      }
      return content;
    };

    GooglePlus.prototype.render = function(activities) {
      var activity;
      return this.target.html(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = activities.length; _i < _len; _i++) {
          activity = activities[_i];
          _results.push(this.renderActivity(activity));
        }
        return _results;
      }).call(this)).join(''));
    };

    return GooglePlus;

  })();

  Lastfm = (function() {

    function Lastfm(selector, username, count) {
      var _this = this;
      this.apikey = "bb0c1a31447cadfef07cf434223a1377";
      this.selector = selector;
      this.username = username;
      this.count = count;
      this.target = $(selector);
      if (this.target != null) {
        $.ajax({
          url: "http://ws.audioscrobbler.com/2.0/?method=user.gettopalbums&user=" + this.username + "&period=7day&api_key=" + this.apikey + "&format=json",
          dataType: "jsonp",
          error: function(err) {
            return this.target.addClass("error").text("Last.fm's busted");
          },
          success: function(data) {
            var album;
            return _this.render(((function() {
              var _i, _len, _ref, _results;
              _ref = data.topalbums.album;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                album = _ref[_i];
                if (!(album.image[3]['#text'].match(/noimage/) != null)) {
                  _results.push(album);
                }
              }
              return _results;
            })()).slice(0, _this.count));
          }
        });
      }
    }

    Lastfm.prototype.render = function(albums) {
      var album;
      return this.target.html(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = albums.length; _i < _len; _i++) {
          album = albums[_i];
          _results.push("<a href='" + album.url + "'><img title='" + album.artist.name + " &mdash; " + album.name + "' src='" + (resizeImage({
            url: album.image[3]['#text'],
            resize_w: 192
          })) + "' /></a><hr class='short'>");
        }
        return _results;
      })()).join(''));
    };

    return Lastfm;

  })();

  prettyDate = function(time) {
    var current_date, current_date_full, current_date_time, date, day_diff, diff, say;
    if (navigator.appName === 'Microsoft Internet Explorer') {
      return "<span>&infin;</span>";
    }
    say = {
      just_now: " now",
      minute_ago: "1 minute ago",
      minutes_ago: " minutes ago",
      hour_ago: "1 hour ago",
      hours_ago: " hours ago",
      yesterday: "1 day ago",
      days_ago: " days ago",
      last_week: "1 week ago",
      weeks_ago: " weeks ago"
    };
    current_date = new Date();
    current_date_time = current_date.getTime();
    current_date_full = current_date_time + (1 * 60000);
    date = new Date(time);
    diff = (current_date_full - date.getTime()) / 1000;
    day_diff = Math.floor(diff / 86400);
    if (isNaN(day_diff) || day_diff < 0) {
      return "<span>&infin;</span>";
    }
    return day_diff === 0 && (diff < 60 && say.just_now || diff < 120 && say.minute_ago || diff < 3600 && Math.floor(diff / 60) + say.minutes_ago || diff < 7200 && say.hour_ago || diff < 86400 && Math.floor(diff / 3600) + say.hours_ago) || day_diff === 1 && say.yesterday || day_diff < 7 && day_diff + say.days_ago || day_diff === 7 && say.last_week || day_diff > 7 && Math.ceil(day_diff / 7) + say.weeks_ago;
  };

  resizeImage = function(options) {
    return "http://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?container=focus&" + ($.param(options));
  };

  $(function() {
    var github, googleplus, lastfm, twitter;
    twitter = new Twitter("#tweets", "zacharydenton", 8);
    github = new GitHub("#github-feed", "zacharydenton", 14);
    googleplus = new GooglePlus("#googleplus", "103362376417669694940", 8);
    return lastfm = new Lastfm("#lastfm", "zacharydenton", 10);
  });

}).call(this);
